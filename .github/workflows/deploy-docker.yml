name: CI/CD Frontend

on:
    push:
        branches: [main]

permissions:
  contents: read
  packages: write

jobs:
    build-and-push:
        runs-on: ubuntu-latest
        steps:
            - name: Checkout
              uses: actions/checkout@v4.2.0

            # CI: Node + Yarn 4
            - name: Setup Node
              uses: actions/setup-node@v4
              with:
                  node-version: 18.x
                  cache: "yarn"

            - name: Enable Corepack & Yarn 4
              run: |
                  corepack enable
                  corepack prepare yarn@4.0.2 --activate
                  yarn -v

            - name: Install deps
              run: yarn install --immutable

            - name: Build (Vite)
              run: yarn build

            # Docker 로그인
            - name: Login to GHCR
              uses: docker/login-action@v3
              with:
                  registry: ${{ secrets.REGISTRY }}
                  username: ${{ github.actor }}
                  password: ${{ secrets.GITHUB_TOKEN }}

            # Buildx 활성화 (캐시 export/use 위해 필수)
            - name: Set up Docker Buildx
              uses: docker/setup-buildx-action@v3
              with:
                  install: true
                  driver: docker-container
                  driver-opts: |
                             image=moby/buildkit:latest

            # Docker Build & Push
            - name: Build & Push Image
              uses: docker/build-push-action@v6
              with:
                  context: .
                  file: ./Dockerfile
                  push: true
                  tags: |
                      ghcr.io/j-yesung/volume-calculator:latest
                      ghcr.io/j-yesung/volume-calculator:${{ github.sha }}
                  cache-from: type=gha
                  cache-to: type=gha,mode=max

    deploy:
        needs: build-and-push
        runs-on: ubuntu-latest
        steps:
            - name: Add host to known_hosts
              run: |
                  mkdir -p ~/.ssh
                  ssh-keyscan -p "${{ secrets.EC2_PORT || 22 }}" "${{ secrets.EC2_HOST }}" >> ~/.ssh/known_hosts

            - name: Deploy on EC2
              uses: appleboy/ssh-action@v1.2.0
              env:
                  IMAGE_NAME: ${{ secrets.IMAGE_NAME }}
              with:
                  host: ${{ secrets.EC2_HOST }}
                  username: ${{ secrets.EC2_USER }}
                  port: ${{ secrets.EC2_PORT || 22 }}
                  key: ${{ secrets.EC2_SSH_KEY }}
                  envs: IMAGE_NAME
                  script_stop: true
                  script: |
                          set -euo pipefail
            
                          # 필수값 체크
                          : "${IMAGE_NAME:?IMAGE_NAME is required}"
                          APP_NAME="selekhome"
                          IMAGE="${IMAGE_NAME}:latest"
                          echo "[1/4] Pull image: $IMAGE"
                          docker pull "$IMAGE"
                          echo "[2/4] Stop & remove old container (if exists)"
                          docker rm -f "$APP_NAME" 2>/dev/null || true
                          echo "[3/4] Run new container"
                          docker run -d --name "$APP_NAME" --restart unless-stopped \
                            -p 127.0.0.1:8080:80 \
                            "$IMAGE"
                          echo "[4/4] Cleanup dangling images"
                          docker image prune -f
                          echo "Deployment completed!"
